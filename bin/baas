#!/usr/bin/env node

const program    = require('commander');
const path       = require('path');
const fs         = require('fs');
const yaml       = require('js-yaml');
const _          = require('lodash');
const BaaSServer = require('../server');

program.version(require('../package').version)
  .option('-p --port [9485]', 'Port to bind [9485].', '9485')
  .option('-h --hostname [0.0.0.0]', 'Hostname to bind [0.0.0.0].', '0.0.0.0')
  .option('-s --salt [10]', 'Salt length.', '10')
  .option('-l --log-level [info]', 'Debug level', 'info')
  .option('-c --config-file <file>', 'Configuration file.')
  .parse(process.argv);

//I don't like this
var agent  = require('auth0-instrumentation');
var pkg    = require('../package.json');
var _env = Object.assign({}, {
  COLLECT_RESOURCE_USAGE: true,
  DEPLOYMENT_REGION: 'unknown'
}, process.env);
agent.init(pkg, _env);

agent.merics.setDefaultTag({
  region: _env.DEPLOYMENT_REGION
});

var config = _.pick(program, ['salt', 'port', 'hostname', 'configFile', 'logLevel']);
config.metrics = agent.metrics;

if (config.configFile) {
  try {
    var config_file = path.resolve(process.cwd(), config.configFile);
    var doc = yaml.safeLoad(fs.readFileSync(config_file, 'utf8'));
    _.extend(config, doc);
  } catch (e) {
    console.error('Error loading configuration \n', e.stack);
  }
}

var server = new BaaSServer(config);

server.start();

process.on('SIGTERM', function () {
  server.stop(function () {
    process.exit(0);
  });
  setTimeout(function () {
    process.exit(0);
  });
}).on('SIGUSR2', function () {
  const v8Profiler = require('v8-profiler');
  const path = `/tmp/baas-heap-${Math.round(new Date().getTime() / 1000)}.heapsnapshot`;
  const snapshot = v8Profiler.takeSnapshot();

  snapshot.export()
    .pipe(fs.createWriteStream(path))
    .on('finish', function () {
      console.log(`snapshot stored in ${path}`);
      snapshot.delete();
    });
});

