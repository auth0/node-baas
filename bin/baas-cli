#!/usr/bin/env node

const program = require('commander');
const Client = require('../client');
const _ = require('lodash');
const read = require('read')
const agent = require('auth0-instrumentation');

program.version(require('../package').version)
  .option('-p, --port [9485]', 'Port to bind [9485].', '9485')
  .option('-h, --hostname [0.0.0.0]', 'Hostname to bind [0.0.0.0].', '0.0.0.0')
  .option('--protocol <protocol>', 'Protocol to use', 'baas')
  .option('--no-reject', 'Allow self signed certs')
  .option('--hash <hash>', 'The hash to compare the password.', false)
  .parse(process.argv);

agent.init({ name: 'baas-cli' }, process.env);

var config = _.pick(program, ['port', 'hostname', 'protocol']);

if (!program.reject) {
  config.rejectUnauthorized = false;
}
config.tracer = agent.tracer;

var client = new Client(config);

client.once('ready', function () {
  if (!program.hash) {
    read({ prompt: 'Enter the password to hash and press enter: ', silent: true }, function(er, password) {
      client.hash(password, function (err, result) {
        if (err) {
          console.error(err.message);
          return process.exit(1);
        }
        console.log('The password hash is ' + result);
        return process.exit(0);
      });
    });
  } else {
    read({ prompt: 'Enter the password to compare: ', silent: true }, function(er, password) {
      client.compare(password, program.hash, function (err, result) {
        if (err) {
          console.error(err.message);
          return process.exit(1);
        }
        if (result) {
          console.log('The password match the hash.');
          return process.exit(0);
        } else {
          console.log('The password does not match the hash.');
          return process.exit(1);
        }
      });
    });
  }
}).on('error', function (err) {
  console.error(err.message);
  process.exit(1);
});
